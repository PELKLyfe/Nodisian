version: 1
policy_id: nodesian-governance-v3.1-hardened
description: >
  Hardened governance and automation policy with explicit SLAs, debouncing, and operational controls.
  Artifacts (PKG, DAG, MRF, Risk, Notes) are peer views with partial dependencies; MCP triggers selective recomputes.

engine:
  condition_language: jmespath

event_schemas:
  PKG.Updated:
    required: [patient_id, pkg_pointer, delta]
    properties:
      patient_id: string
      pkg_pointer: string
      delta:
        kind: string
        affects_distribution: boolean
        affected_features: array
  MRF.Updated:
    required: [patient_id, pkg_pointer, mrf_pointer]
  PROMs.BreakoutDetected:
    required: [patient_id, pkg_pointer]
  Risk.Updated:
    required: [patient_id, risk_pointer]
  Risk.Promoted:
    required: [patient_id, risk_pointer]
  Note.Approved:
    required: [patient_id, note_id]

freshness_sla:
  DAG:  {ttl_minutes: 10080}
  MRF:  {ttl_minutes: 1440}
  Risk: {ttl_minutes: 15}

roles:
  provider:
    scopes: [clinical, financial]
  care_manager:
    scopes: [clinical, financial]
  legal_staff:
    scopes: [legal]
  patient:
    scopes: [patient]
  system_agent:
    scopes: [clinical, financial, legal, patient]

scopes:
  clinical:
    redaction_rules: []
  financial:
    redaction_rules: [hide_clinical_details]
  legal:
    redaction_rules: [minimize_phi, hide_risk_scores]
  patient:
    redaction_rules: [hide_internal_ids, hide_model_versions]

artifacts:
  PKGNode:
    required_fields: [id,type,value,units,time,source,provenance,confidence]
    provenance_required: [source_doc, extraction_method, agent_id, timestamp]
    raci:
      R: [IngestionAgent, ScribeAgent]
      A: MCP
      C: [TerminologyService, QAGates]
      I: [SummarizerAgent, GNNAgent, UIAdapter]
    promotion: {required: false}
  PKGEdge:
    required_fields: [src,dst,relation,weight,time,provenance]
    provenance_required: [reason, agent_id, timestamp]
    raci:
      R: [IngestionAgent]
      A: MCP
      C: [TerminologyService]
      I: [DAGAgent, MRFAgent]
    promotion: {required: false}
  DAG:
    required_fields: [nodes,edges,priors,timestamps,provenance]
    provenance_required: [method, constraints, agent_id, timestamp, confidence]
    raci:
      R: [DAGAgent]
      A: MCP
      C: [PolicyConstraints]
      I: [MRFAgent, GNNAgent, SummarizerAgent]
    promotion: {required: false}
  MRF:
    required_fields: [cliques,potentials,covariance,provenance]
    provenance_required: [method, priors_source, agent_id, timestamp]
    raci:
      R: [MRFAgent]
      A: MCP
      C: [DAGAgent, QAGates]
      I: [GNNAgent, SummarizerAgent]
    promotion: {required: false}
  RiskPacket:
    required_fields: [patient_id,heads,CCR,greeks,cones,SHAP,model_version,features_hash,provenance]
    provenance_required: [model_version, features_hash, training_snapshot, agent_id, timestamp, misattribution_risk_score]
    raci:
      R: [GNNAgent]
      A: MCP
      C: [provider]
      I: [SummarizerAgent, UIAdapter]
    promotion:
      required: true
      approver_roles: [provider]
      capture_fields: [approver_id, rationale_text, approved_at]
      creates_event: Risk.Promoted
  NoteDraft:
    required_fields: [type,audience,text,actions,sources,provenance,status]
    provenance_required: [from_pkg_ids, from_risk_ids, agent_id, timestamp]
    raci:
      R: [ScribeAgent, SummarizerAgent]
      A: MCP
      C: [provider]
      I: [UIAdapter]
    promotion:
      required: true
      approver_roles: [provider]
      creates_event: Note.Approved
  ActionOrder:
    required_fields: [action_type,payload,initiator,status,provenance]
    provenance_required: [source_note_id, agent_id, timestamp]
    raci:
      R: [SummarizerAgent]
      A: [provider]
      C: [FinancialScopeGuard, LegalScopeGuard]
      I: [MCP, UIAdapter, Patient]
    promotion:
      required: true
      approver_roles: [provider]

commands:
  Ingestion.Ingest:
    allowed_callers: [UIAdapter, ScribeAgent]
    required_scope: clinical
  DAG.Build:
    allowed_callers: [MCP]
    required_scope: clinical
  MRF.Fit:
    allowed_callers: [MCP]
    required_scope: clinical
  GNN.ScoreRisk:
    allowed_callers: [MCP]
    required_scope: clinical
  Summarizer.ComposeTiles:
    allowed_callers: [MCP]
    required_scope: clinical
  Summarizer.Answer:
    allowed_callers: [MCP, UIAdapter]
    required_scope: "*"
    constraints:
      - when: "scope == 'patient'"
        require_consent: true
      - when: "scope in ['clinical','financial','legal']"
        require_consent: false
      - deny_if_scope_mismatch: true
  MCP.Promote:
    allowed_callers: [provider, MCP]
    required_scope: clinical
    constraints:
      - must_reference_artifact: [RiskPacket, NoteDraft, ActionOrder]
      - approver_role_in: [provider]
      - link_provenance: true

automations:
  - on_event: PKG.Updated
    conditions:
      - "delta.kind in ['temporal_boundary','causal_prior']"
      - "artifacts.DAG.stale == `true`"
    do:
      - command: DAG.Build
        with: {pkg_pointer: "{{pkg_pointer}}"}
  - on_event: PKG.Updated
    conditions:
      - "delta.affects_distribution == `true`"
      - "artifacts.MRF.stale == `true`"
    do:
      - command: MRF.Fit
        with: {pkg_pointer: "{{pkg_pointer}}"}
  - on_event: MRF.Updated
    conditions:
      - "artifacts.Risk.stale == `true`"
    do:
      - command: GNN.ScoreRisk
        with: {pkg_pointer: "{{pkg_pointer}}", mrf_pointer: "{{mrf_pointer}}"}  
  - on_event: PKG.Updated
    conditions:
      - "delta.kind == 'causal_prior'"
    do:
      - command: GNN.ScoreRisk
        with: {pkg_pointer: "{{pkg_pointer}}"}
  - on_event: PROMs.BreakoutDetected
    do:
      - command: GNN.ScoreRisk
        with: {pkg_pointer: "{{pkg_pointer}}"}
  - on_event: Risk.Updated
    do:
      - command: Summarizer.ComposeTiles
        with: {risk_pointer: "{{risk_pointer}}", audience: "provider", mode: "preview"}
  - on_event: Risk.Promoted
    do:
      - command: Summarizer.ComposeTiles
        with: {risk_pointer: "{{risk_pointer}}", audience: "provider", mode: "final"}
  - on_event: Note.Approved
    do:
      - command: MCP.Emit
        with: {event_type: "Action.Ready", note_id: "{{note_id}}"}

ui_policy:
  tiles:
    block_final_actions_on_preview: true
    require_promotion_for: [RiskPacket]

governance:
  misattribution:
    compute_on: [PKG.Updated, Summarizer.ComposeTiles]
    fields: [source_conflict_count, scope_mismatch, age_of_data_minutes]
    thresholds:
      warn: 0.3
      block_promotion: 0.6

models:
  gnn:
    current_version: "gnn_v3.4"
    canary:
      enabled: true
      traffic_percent: 10
    rollback_on:
      error_rate_gt: 0.05
      misattribution_risk_gt: 0.6

reliability:
  debounce:
    DAG.Build: {window_ms: 5000, group_by: ["patient_id","inputs_hash"]}
    MRF.Fit:   {window_ms: 10000, group_by: ["patient_id","inputs_hash"]}
    GNN.ScoreRisk: {window_ms: 3000, group_by: ["patient_id","inputs_hash"]}
  idempotency:
    command_key_fields: [command, patient_id, inputs_hash]
    ttl_seconds: 600
  inputs_hash_spec:
    algo: sha256
    canonicalize: json-stable
    include_fields: ["pkg_pointer","dag_pointer","mrf_pointer","audience","mode"]
  heartbeats:
    expected_every_ms: 15000
    miss_limit: 4
  retries:
    transient:
      max_attempts: 3
      backoff_ms: [250, 1000, 3000]
    non_transient:
      max_attempts: 0
  dead_letter_queue:
    topic: mcpgw.dlq
    sample_rate: 0.1
    alerting:
      pagerduty:
        trigger_on_count_over: 20
        window_seconds: 300

security:
  encryption_at_rest:
    kms: azure_key_vault
    key_rotation_days: 90
  encryption_in_transit: tls1.2_plus

capabilities:
  jwt:
    issuer: mcp.nodesian
    audience: agents
    lifetime_seconds: 900
    refresh_before_expiry_ms: 30000
    claims: [role, scopes, patient_ids, allowed_commands]

redaction_rules:
  hide_clinical_details:
    fields: [labs, imaging_reports, narrative_text]
  minimize_phi:
    fields: [dob, address, contact, identifiers]
  hide_risk_scores:
    fields: [heads, CCR, greeks, SHAP]
  hide_internal_ids:
    fields: [artifact_id, features_hash, model_version]

retention:
  audit_log:
    mode: append_only
    retention_days: 3650
    signing: ed25519
  artifacts:
    default_retention_days: 3650
    allow_delete: false
    supersede_by_pointer: true

audit:
  require_correlation_id: true
  log_fields: [caller, role, scope, patient_id, command, event_type, artifact_id, timestamp]
  export_sinks:
    - type: opensearch
    - type: blob_archive
